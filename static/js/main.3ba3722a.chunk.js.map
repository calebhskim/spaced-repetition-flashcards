{"version":3,"sources":["components/Home.js","components/Edit.js","constants/actions.js","actions/nextQuestion.js","components/Card.js","components/Quiz.js","components/Results.js","components/App.js","constants/initialState.js","constants/questions.js","store/configureStore.js","reducers/quiz.js","reducers/index.js","serviceWorker.js","index.js","store/index.js"],"names":["Home","Header","as","style","color","to","Button","React","Component","Edit","NEXT_QUESTION","actions","nextQuestion","questionId","isCorrect","question","difficulty","type","payload","answerState","Card","props","handleCheckboxSelection","bind","handleCheckAnswer","handleNextQuestion","startNewTimer","state","selectedKey","cardState","currentInterval","currentTime","this","key","setState","answerKey","shouldStop","id","questionText","clearInterval","setInterval","timer","options","optionKeys","Object","keys","sort","optionElements","map","k","i","modifier","Icon","className","name","label","Form","Field","Checkbox","radio","value","checked","onClick","answered","Progress","total","size","mapDispatchToProps","connect","Quiz","interval","mainTimer","currentIndex","questions","length","aItem","bItem","a","b","ascore","answeredCorrectly","attempts","bscore","quiz","currentSession","Results","answerKeys","hasStats","totalAttempts","reduce","acc","totalCorrect","totalScore","toFixed","App","basename","exact","path","category","c","d","e","configureStore","initialState","rootReducer","middlewares","middlewareList","thunk","enhancer","compose","applyMiddleware","window","devToolsExtension","f","store","createStore","response","newState","combineReducers","Boolean","location","hostname","match","newStore","PRELOADED_STATE","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3ba3722a.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header } from 'semantic-ui-react'\n\nclass Home extends React.Component {\n  render() {\n    return (\n      <div>\n        <Header as='h2' style={{color: 'white'}}>Spaced Repetition System</Header>\n        <Link to='/quiz'><Button>Start Session</Button></Link>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\n\nclass Edit extends React.Component {\n  render() {\n    return (\n      <div>Edit</div>\n    );\n  }\n}\n\nexport default Edit;\n","export default {\n  NEXT_QUESTION: 'NEXT_QUESTION',\n};\n","import actions from '../constants/actions';\n\nconst { NEXT_QUESTION } = actions;\n\nconst nextQuestion = (questionId, isCorrect, question, difficulty) => ({\n  type: NEXT_QUESTION,\n  payload: {\n    questionId,\n    isCorrect,\n    question,\n    difficulty,\n  },\n});\n\nexport default nextQuestion;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Button, Checkbox, Form, Icon, Progress } from 'semantic-ui-react';\n\nimport nextQuestion from '../actions/nextQuestion';\n\nimport './Card.css';\n\nconst answerState = {\n  UNANSWERED: 0,\n  CORRECT: 1,\n  WRONG: 2,\n};\n\nclass Card extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCheckboxSelection = this.handleCheckboxSelection.bind(this);\n    this.handleCheckAnswer = this.handleCheckAnswer.bind(this);\n    this.handleNextQuestion = this.handleNextQuestion.bind(this);\n    this.startNewTimer = this.startNewTimer.bind(this);\n    this.state = {\n      selectedKey: 'a',\n      cardState: answerState.UNANSWERED,\n      currentInterval: 0, // no timer set\n      currentTime: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.startNewTimer();\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.shouldStop) {\n      clearInterval(state.currentInterval);\n    }\n\n    return state;\n  }\n\n  handleCheckboxSelection(key) {\n    this.setState({\n      selectedKey: key,\n    });\n  }\n\n  handleCheckAnswer() {\n    const { selectedKey } = this.state;\n    const { question } = this.props;\n\n    this.setState({\n      cardState: selectedKey === question.answerKey ? answerState.CORRECT : answerState.WRONG,\n    });\n  }\n\n  handleNextQuestion() {\n    const { selectedKey, currentInterval } = this.state;\n    const { question, shouldStop } = this.props;\n\n    if (!shouldStop) {\n      this.props.nextQuestion(question.id, selectedKey === question.answerKey, question.questionText, question.difficulty);\n      this.setState({\n        selectedKey: 'a',\n        cardState: answerState.UNANSWERED,\n        currentTime: 0,\n      });\n      clearInterval(currentInterval);\n      this.startNewTimer();\n    }\n  }\n\n  startNewTimer() {\n    this.setState({\n      currentTime: 0,\n      currentInterval: setInterval(() => {\n        const { currentInterval, currentTime } = this.state;\n        const { question: { timer }, shouldStop } = this.props;\n        const timerInMs = timer * 1000;\n\n        if (timerInMs === currentTime || shouldStop) {\n          clearInterval(currentInterval);\n          this.handleNextQuestion();\n        }\n        else {\n          this.setState({\n            currentTime: currentTime + 100,\n          });\n        }\n      }, 100), // every 100ms for 'smoothness'\n    });\n  }\n\n  render() {\n    const { cardState, currentTime } = this.state;\n    const { question: { answerKey, questionText, options, timer } } = this.props;\n\n    if (!answerKey) {\n      return <Redirect to='/results' />;\n    }\n\n    const optionKeys  = Object.keys(options || {});\n\n    optionKeys.sort();\n\n    const optionElements = optionKeys.map((k, i) => {\n      let modifier = null;\n\n      if (cardState !== answerState.UNANSWERED) {\n        if (k === answerKey) {\n          modifier = <Icon className='modifier-check' name='check' />;\n        }\n        else {\n          modifier = <Icon className='modifier-times' name='times' />;\n        }\n      }\n\n      const label = (\n        <label className='label-modifier'>\n          {options[k]}\n          {modifier || ''}\n        </label>\n      );\n\n      return (<Form.Field key={i}>\n        <Checkbox\n          radio\n          label={label}\n          name='checkboxRadioGroup'\n          value={options[k]}\n          checked={this.state.selectedKey === k}\n          onClick={() => this.handleCheckboxSelection(k)}\n        />\n      </Form.Field>);\n    });\n\n    const answered = cardState !== answerState.UNANSWERED;\n\n    return (\n      <div className='card'>\n        <Progress className='card-progress' value={currentTime} total={timer * 1000} size='small' />\n        <Form className='question-form'>\n          <Form.Field>{questionText}</Form.Field>\n          {optionElements}\n          <Button\n            className='answer-check'\n            onClick={answered ? this.handleNextQuestion : this.handleCheckAnswer}\n          >\n            { answered ? 'Next' : 'Check Answer' }\n          </Button>\n        </Form> \n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => state;\nconst mapDispatchToProps = {\n  nextQuestion,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Card);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Header } from 'semantic-ui-react'\n\nimport Card from './Card';\n\nimport './Quiz.css';\n\nclass Quiz extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      interval: setInterval(() => {\n        const { interval, timer } = this.state;\n        if (timer >= props.mainTimer) {\n          clearInterval(interval);\n        }\n        else {\n          this.setState({\n            timer: timer + 1,\n          });\n        }\n      }, 1000),\n      timer: 0,\n    };\n  }\n\n  render() {\n    let { answered, currentIndex, mainTimer, questions } = this.props;\n    let { timer } = this.state;\n\n    let shouldStop = false;\n    let question = {};\n\n    // Allow user to see all questions at least once\n    if (Object.keys(answered).length < questions.length) {\n      question = questions[currentIndex] || {};\n    }\n    else {\n      // Once user has seen all questions sort by score and show worse performing questions first.\n      // Also this update pattern works because questions isn't being modified.\n      if (currentIndex % questions.length === 0) {\n        questions.sort((aItem, bItem) => {\n          const a = answered[aItem.id];\n          const b = answered[bItem.id];\n\n          let ascore = a.answeredCorrectly / a.attempts / a.difficulty;\n          let bscore = b.answeredCorrectly / b.attempts / b.difficulty;\n          \n          if (ascore < bscore) {\n            return -1;\n          }\n          else if (ascore > bscore) {\n            return 1;\n          }\n          else {\n            return 0;\n          }\n        });\n      }\n\n      question = questions[currentIndex % questions.length];\n    }\n\n    // set end-state if timer is up\n    if (mainTimer === timer) {\n      shouldStop = true;\n      question = {};\n    }\n\n    return (\n      <div className='quiz'>\n        <Header as='h3' className='main-timer' style={{color: 'white'}}>Total Time: {mainTimer - timer}</Header>\n        <Card\n          shouldStop={shouldStop}\n          question={question}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  quiz: {\n    currentSession: { answered, currentIndex },\n    questions,\n    mainTimer,\n  }\n}) => ({\n  answered,\n  currentIndex,\n  questions,\n  mainTimer,\n});\nconst mapDispatchToProps = {};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Header,\n} from 'semantic-ui-react'\n\nimport './Results.css';\n\nclass Results extends React.Component {\n  render() {\n    const { answered } = this.props;\n    const answerKeys = Object.keys(answered);\n    const hasStats = answerKeys.length > 0;\n\n    const totalAttempts = answerKeys.reduce((acc, k) => acc + answered[k].attempts, 0);\n    const totalCorrect = answerKeys.reduce((acc, k) => acc + answered[k].answeredCorrectly, 0);\n    const totalScore = totalCorrect / totalAttempts;\n\n    return (\n      <div className='results'>\n        <Header as='h2'>Results</Header>\n        {hasStats ?\n          <div className='stats'>\n            <div className='question-stats'>\n              <Header as='h4'>Question Stats</Header>\n              {Object.keys(answered).map((k, i) => {\n                const { attempts, answeredCorrectly, difficulty, question } = answered[k]; \n                return (\n                  <div className='stat-group' key={i}>\n                    <div className='stat-title'>{question}</div>\n                    <div className='stat'>Attempts: {attempts}</div>\n                    <div className='stat'>Correct: {answeredCorrectly}</div>\n                    <div className='stat'>Difficulty: {difficulty}</div>\n                    <div className='stat'>Score: {answeredCorrectly / attempts}</div>\n                  </div>\n                );\n              })}\n            </div>\n            <div className='summary'>\n              <Header as='h4'>Overall Stats</Header>\n              <div className='summary-title'>Total Attempts: {totalAttempts}</div>\n              <div className='summary-title'>Total Correct: {totalCorrect}</div>\n\n              <div className='summary-title'>Total Score: {totalScore.toFixed(3)}</div>\n            </div>\n          </div> :\n          <Header as='h4'>Oops it looks like there are no stats!</Header>}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { quiz: { currentSession: { answered } } } = state;\n\n  return {\n    answered,\n  };\n};\n\nexport default connect(mapStateToProps)(Results);\n","import React from 'react';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\nimport Home from './Home';\nimport Edit from './Edit';\nimport Quiz from './Quiz';\nimport Results from './Results';\n\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router basename='/'>\n        <div className='app-content'>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/quiz\">\n              <Quiz />\n            </Route>\n            <Route path=\"/edit\">\n              <Edit />\n            </Route>\n            <Route exact path=\"/results\">\n              <Results />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import questions from './questions';\n\nexport default {\n  quiz: {\n    currentSession: {\n      currentIndex: 0,\n      answered: {},\n    },\n    questions,\n    mainTimer: 60,\n  },\n};\n","export default [\n  {\n    id: 0,\n    category: 'Addition',\n    questionText: 'What is 2 + 9?',\n    answerKey: 'a',\n    options: {\n      a: 11,\n      b: 7,\n      c: 18,\n      d: 29,\n      e: 'Not possible',\n    },\n    timer: 5,\n    difficulty: 1,\n  },\n  {\n    id: 1,\n    category: 'Subtraction',\n    questionText: 'What is 12 - 4?',\n    answerKey: 'c',\n    options: {\n      a: 12,\n      b: -8,\n      c: 8,\n      d: 16,\n      e: 'Not possible',\n    },\n    timer: 5,\n    difficulty: 1,\n  },\n  {\n    id: 2,\n    category: 'Subtraction',\n    questionText: 'What is 10 - 22?',\n    answerKey: 'b',\n    options: {\n      a: 32,\n      b: -12,\n      c: -22,\n      d: 10,\n      e: 'Not possible',\n    },\n    timer: 5,\n    difficulty: 1,\n  },\n  {\n    id: 3,\n    category: 'Multiplication',\n    questionText: 'What is 5 * 12?',\n    answerKey: 'a',\n    options: {\n      a: 60,\n      b: 17,\n      c: 15,\n      d: 7,\n      e: 'Not possible',\n    },\n    timer: 10,\n    difficulty: 2,\n  },\n  {\n    id: 4,\n    category: 'Multiplication',\n    questionText: 'What is 11 * 4?',\n    answerKey: 'c',\n    options: {\n      a: 11,\n      b: 15,\n      c: 44,\n      d: 7,\n      e: 'Not possible',\n    },\n    timer: 10,\n    difficulty: 2,\n  },\n  {\n    id: 5,\n    category: 'Division',\n    questionText: 'What is 9 / 3?',\n    answerKey: 'd',\n    options: {\n      a: 6,\n      b: 12,\n      c: 18,\n      d: 3,\n      e: 'Not possible',\n    },\n    timer: 10,\n    difficulty: 2,\n  },\n  {\n    id: 6,\n    category: 'Division',\n    questionText: 'What is 9 / 0?',\n    answerKey: 'e',\n    options: {\n      a: 0,\n      b: 9,\n      c: 90,\n      d: 12,\n      e: 'Not possible',\n    },\n    timer: 15,\n    difficulty: 3,\n  },\n];\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunk from 'redux-thunk'; // can use redux-saga instead for more complicated actions\n\n// Create a store using redux store functions. reducers is a map of reducer names to their\n// corresponding functions. middlewares is an array of middlewares to use. We can possibly\n// add storeEnhancers here in the future if needed.\nexport default function configureStore(initialState = {}, rootReducer, middlewares = []) {\n  const middlewareList = [thunk, ...middlewares];\n\n  if (process.env.NODE_ENV !== 'production' && typeof window === 'object') {\n    const logger = createLogger();\n    middlewareList.push(logger);\n  }\n\n  const enhancer = compose(\n    applyMiddleware(...middlewareList),\n    typeof window === 'object' && typeof window.devToolsExtension !== 'undefined' ? window.devToolsExtension() : f => f,\n  );\n\n  const store = createStore(rootReducer, initialState, enhancer);\n\n  return store;\n}\n","import initialState from '../constants/initialState';\nimport actions from '../constants/actions';\n\nconst {\n  NEXT_QUESTION,\n} = actions;\n\nconst quiz = (state = initialState.quiz, { payload, response, type }) => {\n  switch (type) {\n    case NEXT_QUESTION: {\n      const { questionId, isCorrect, question, difficulty } = payload;\n      const newState = { ...state };\n      newState.currentSession.currentIndex += 1;\n\n      if (questionId in newState.currentSession.answered) {\n        newState.currentSession.answered[questionId].attempts += 1;\n        if (isCorrect) {\n          newState.currentSession.answered[questionId].answeredCorrectly += 1;\n        }\n      }\n      else {\n        newState.currentSession.answered[questionId] = {\n          attempts: 1,\n          answeredCorrectly: isCorrect ? 1 : 0,\n          question,\n          difficulty,\n        };\n      }\n\n      return newState;\n    }\n    default:\n      return state;\n  }\n};\n\nexport default quiz;\n","import { combineReducers } from 'redux';\n\nimport quiz from './quiz';\n\nconst rootReducer = combineReducers({\n  quiz,\n});\n\nexport default rootReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/App';\nimport initialState from './constants/initialState';\nimport Store from './store';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\n// Grab the state from a global variable injected during SSR or use constant state\nconst preloadedState = window.PRELOADED_STATE || initialState;\nconst store = new Store(preloadedState);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import configureStore from './configureStore';\nimport rootReducer from '../reducers';\n\nexport default function store(initialState = {}) {\n  const middlewares = [];\n\n  // If needed later\n  // const storeEnhancers = {};\n\n  const newStore = configureStore(initialState, rootReducer, middlewares);\n\n  return newStore;\n}\n"],"sourceRoot":""}